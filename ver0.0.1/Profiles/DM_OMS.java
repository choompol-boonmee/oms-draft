package au.com.langdale.cimtool.generated;
import javax.persistence.*;
/**
 * Annotated java for DM_OMS_Profile
 * Generated by CIMTool http://cimtool.org
 */
public class DM_OMS_Profile
{
    /**
     * Tangible resource of the utility, including power system equipment, various
     * end devices, cabinets, buildings, etc. For electrical network equipment,
     * the role of the asset is defined through PowerSystemResource and its subclasses,
     * defined mainly in the Wires model (refer to IEC61970-301 and model package
     * IEC61970::Wires). Asset description places emphasis on the physical characteristics
     * of the equipment fulfilling that role.
     */
    @Entity
    @Table(name="\"Asset\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Asset
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Condition of asset at last baseline. Examples include new, rebuilt, overhaul
         * required, other. Refer to inspection data for information on the most current
         * condition of the asset.
         */
        public String getInitialCondition () { return initialCondition; }
        public void setInitialCondition ( String initialCondition ) { this.initialCondition = initialCondition; }
        @Basic()
        @Column(name="\"initialCondition\"")
        private String initialCondition ;
         
        /**
         * Percentage of initial life expectancy that has been lost as of the last
         * life expectancy baseline. Represents
         * (initial life expectancy - current life expectancy) / initial life expectancy.
         */
        public Double getInitialLossOfLife () { return initialLossOfLife; }
        public void setInitialLossOfLife ( Double initialLossOfLife ) { this.initialLossOfLife = initialLossOfLife; }
        @Basic()
        @Column(name="\"initialLossOfLife\"")
        private Double initialLossOfLife ;
         
        /**
         * Indication of whether asset is currently deployed (in use), ready to be
         * put into use or not available for use.
         */
        public InUseStateKind getInUseState () { return inUseState; }
        public void setInUseState ( InUseStateKind inUseState ) { this.inUseState = inUseState; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"inUseState\"")
        private InUseStateKind inUseState ;
         
        /**
         * Kind of asset. Used in description of asset components in asset instance
         * templates.
         */
        public String getKind () { return kind; }
        public void setKind ( String kind ) { this.kind = kind; }
        @Basic()
        @Column(name="\"kind\"")
        private String kind ;
         
        /**
         * Current lifecycle state of asset.
         */
        public String getLifecycleState () { return lifecycleState; }
        public void setLifecycleState ( String lifecycleState ) { this.lifecycleState = lifecycleState; }
        @Basic()
        @Column(name="\"lifecycleState\"")
        private String lifecycleState ;
         
        /**
         * Lot number for this asset. Even for the same model and version number,
         * many assets are manufactured in lots.
         */
        public String getLotNumber () { return lotNumber; }
        public void setLotNumber ( String lotNumber ) { this.lotNumber = lotNumber; }
        @Basic()
        @Column(name="\"lotNumber\"")
        private String lotNumber ;
         
        /**
         * Purchase price of asset.
         */
        public String getPurchasePrice () { return purchasePrice; }
        public void setPurchasePrice ( String purchasePrice ) { this.purchasePrice = purchasePrice; }
        @Basic()
        @Column(name="\"purchasePrice\"")
        private String purchasePrice ;
         
        /**
         * Reason asset retired.
         */
        public String getRetiredReason () { return retiredReason; }
        public void setRetiredReason ( String retiredReason ) { this.retiredReason = retiredReason; }
        @Basic()
        @Column(name="\"retiredReason\"")
        private String retiredReason ;
         
        /**
         * Serial number of this asset.
         */
        public String getSerialNumber () { return serialNumber; }
        public void setSerialNumber ( String serialNumber ) { this.serialNumber = serialNumber; }
        @Basic()
        @Column(name="\"serialNumber\"")
        private String serialNumber ;
         
        /**
         * Utility-specific classification of Asset and its subtypes, according to
         * their corporate standards, practices, and existing IT systems (e.g., for
         * management of assets, maintenance, work, outage, customers, etc.).
         */
        public String getType () { return type; }
        public void setType ( String type ) { this.type = type; }
        @Basic()
        @Column(name="\"type\"")
        private String type ;
         
    }
    /**
     * Set of attributes of an asset, representing typical datasheet information
     * of a physical device that can be instantiated and shared in different data
     * exchange contexts:
     * - as attributes of an asset instance (installed or in stock)
     * - as attributes of an asset model (product by a manufacturer)
     * - as attributes of a type asset (generic type of an asset as used in designs/extension
     * planning).
     */
    @Entity
    @Table(name="\"AssetInfo\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class AssetInfo
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Asset information (nameplate) for this catalog asset type.
         */
        public CatalogAssetType getCatalogAssetType () { return catalogAssetType; }
        public void setCatalogAssetType ( CatalogAssetType catalogAssetType ) { this.catalogAssetType = catalogAssetType; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"CatalogAssetType\"")
        private CatalogAssetType catalogAssetType ;
         
    }
     
    /**
     * Kinds of assets or asset components.
     */
    @Entity
    @Table(name="\"AssetKind\"")
    public static class AssetKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
     
    /**
     * Lifecycle states an asset can be in.
     * While the possible lifecycle states are standardized, the allowed transitions
     * are not - they are intended to be defined by the business process requirements
     * of local implementations.
     */
    @Entity
    @Table(name="\"AssetLifecycleStateKind\"")
    public static class AssetLifecycleStateKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * a Assets that may be used for planning, work or design purposes.
     */
    @Entity
    @Table(name="\"CatalogAssetType\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class CatalogAssetType
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Estimated unit cost (or cost per unit length) of this type of asset. It
         * does not include labor to install, construct or configure it.
         */
        public String getEstimatedUnitCost () { return estimatedUnitCost; }
        public void setEstimatedUnitCost ( String estimatedUnitCost ) { this.estimatedUnitCost = estimatedUnitCost; }
        @Basic()
        @Column(name="\"estimatedUnitCost\"")
        private String estimatedUnitCost ;
         
        /**
         * Kind of asset (from enumerated list).
         */
        public String getKind () { return kind; }
        public void setKind ( String kind ) { this.kind = kind; }
        @Basic()
        @Column(name="\"kind\"")
        private String kind ;
         
        /**
         * True if item is a stock item (default).
         */
        public Boolean getStockItem () { return stockItem; }
        public void setStockItem ( Boolean stockItem ) { this.stockItem = stockItem; }
        @Basic()
        @Column(name="\"stockItem\"")
        private Boolean stockItem ;
         
        /**
         * Description of type of asset.
         */
        public String getType () { return type; }
        public void setType ( String type ) { this.type = type; }
        @Basic()
        @Column(name="\"type\"")
        private String type ;
         
    }
    /**
     * Asset container that performs one or more end device functions. One type
     * of end device is a meter which can perform metering, load management, connect/disconnect,
     * accounting functions, etc. Some end devices, such as ones monitoring and
     * controlling air conditioners, refrigerators, pool pumps may be connected
     * to a meter. All end devices may have communication capability defined by
     * the associated communication function(s). An end device may be owned by
     * a consumer, a service provider, utility or otherwise.
     * There may be a related end device function that identifies a sensor or
     * control point within a metering application or communications systems (e.g.,
     * water, gas, electricity).
     * Some devices may use an optical port that conforms to the ANSI C12.18 standard
     * for communications.
     */
    @Entity
    @Table(name="\"EndDevice\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class EndDevice
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The aliasName is free text human readable name of the object alternative
         * to IdentifiedObject.name. It may be non unique and may not correlate to
         * a naming hierarchy.
         * The attribute aliasName is retained because of backwards compatibility
         * between CIM relases. It is however recommended to replace aliasName with
         * the Name class as aliasName is planned for retirement at a future time.
         */
        public String getAliasName () { return aliasName; }
        public void setAliasName ( String aliasName ) { this.aliasName = aliasName; }
        @Basic()
        @Column(name="\"aliasName\"")
        private String aliasName ;
         
        /**
         * Indication of whether asset is currently deployed (in use), ready to be
         * put into use or not available for use.
         */
        public InUseStateKind getInUseState () { return inUseState; }
        public void setInUseState ( InUseStateKind inUseState ) { this.inUseState = inUseState; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"inUseState\"")
        private InUseStateKind inUseState ;
         
        /**
         * Kind of asset. Used in description of asset components in asset instance
         * templates.
         */
        public AssetKind getKind () { return kind; }
        public void setKind ( AssetKind kind ) { this.kind = kind; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"kind\"")
        private AssetKind kind ;
         
        /**
         * Current lifecycle state of asset.
         */
        public AssetLifecycleStateKind getLifecycleState () { return lifecycleState; }
        public void setLifecycleState ( AssetLifecycleStateKind lifecycleState ) { this.lifecycleState = lifecycleState; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"lifecycleState\"")
        private AssetLifecycleStateKind lifecycleState ;
         
        /**
         * Lot number for this asset. Even for the same model and version number,
         * many assets are manufactured in lots.
         */
        public String getLotNumber () { return lotNumber; }
        public void setLotNumber ( String lotNumber ) { this.lotNumber = lotNumber; }
        @Basic()
        @Column(name="\"lotNumber\"")
        private String lotNumber ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Purchase price of asset.
         */
        public String getPurchasePrice () { return purchasePrice; }
        public void setPurchasePrice ( String purchasePrice ) { this.purchasePrice = purchasePrice; }
        @Basic()
        @Column(name="\"purchasePrice\"")
        private String purchasePrice ;
         
        /**
         * Reason asset retired.
         */
        public RetiredReasonKind getRetiredReason () { return retiredReason; }
        public void setRetiredReason ( RetiredReasonKind retiredReason ) { this.retiredReason = retiredReason; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"retiredReason\"")
        private RetiredReasonKind retiredReason ;
         
        /**
         * Serial number of this asset.
         */
        public String getSerialNumber () { return serialNumber; }
        public void setSerialNumber ( String serialNumber ) { this.serialNumber = serialNumber; }
        @Basic()
        @Column(name="\"serialNumber\"")
        private String serialNumber ;
         
        /**
         * Data applicable to this asset.
         */
        public AssetInfo getAssetInfo () { return assetInfo; }
        public void setAssetInfo ( AssetInfo assetInfo ) { this.assetInfo = assetInfo; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"AssetInfo\"")
        private AssetInfo assetInfo ;
         
        /**
         */
        public ErpInventory getErpInventory () { return erpInventory; }
        public void setErpInventory ( ErpInventory erpInventory ) { this.erpInventory = erpInventory; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"ErpInventory\"")
        private ErpInventory erpInventory ;
         
        /**
         * The sevice location at which the assets exist
         */
        public ServiceLocation getServiceLocation () { return serviceLocation; }
        public void setServiceLocation ( ServiceLocation serviceLocation ) { this.serviceLocation = serviceLocation; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"ServiceLocation\"")
        private ServiceLocation serviceLocation ;
         
    }
    /**
     * Utility inventory-related information about an item or part (and not for
     * description of the item and its attributes). It is used by ERP applications
     * to enable the synchronization of Inventory data that exists on separate
     * Item Master databases. This data is not the master data that describes
     * the attributes of the item such as dimensions, weight, or unit of measure
     * - it describes the item as it exists at a specific location.
     */
    @Entity
    @Table(name="\"ErpInventory\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class ErpInventory
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The aliasName is free text human readable name of the object alternative
         * to IdentifiedObject.name. It may be non unique and may not correlate to
         * a naming hierarchy.
         * The attribute aliasName is retained because of backwards compatibility
         * between CIM relases. It is however recommended to replace aliasName with
         * the Name class as aliasName is planned for retirement at a future time.
         */
        public String getAliasName () { return aliasName; }
        public void setAliasName ( String aliasName ) { this.aliasName = aliasName; }
        @Basic()
        @Column(name="\"aliasName\"")
        private String aliasName ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         */
        public Status getStatus () { return status; }
        public void setStatus ( Status status ) { this.status = status; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"status\"")
        private Status status ;
         
    }
    /**
     * Physical asset that performs the metering role of the usage point. Used
     * for measuring consumption and detection of events.
     */
    @Entity
    @Table(name="\"Meter\"")
    @PrimaryKeyJoinColumn(name="\"mRID\"")
    public static class Meter extends EndDevice
    {
        /**
         * Automated meter reading (AMR) or other communication system responsible
         * for communications to this end device.
         */
        public String getAmrSystem () { return amrSystem; }
        public void setAmrSystem ( String amrSystem ) { this.amrSystem = amrSystem; }
        @Basic()
        @Column(name="\"amrSystem\"")
        private String amrSystem ;
         
        /**
         * A code used to specify the connection category, e.g. low voltage, where
         * the meter operates.
         */
        public String getConnectionCategory () { return connectionCategory; }
        public void setConnectionCategory ( String connectionCategory ) { this.connectionCategory = connectionCategory; }
        @Basic()
        @Column(name="\"connectionCategory\"")
        private String connectionCategory ;
         
        /**
         * Condition of asset at last baseline. Examples include new, rebuilt, overhaul
         * required, other. Refer to inspection data for information on the most current
         * condition of the asset.
         */
        public String getInitialCondition () { return initialCondition; }
        public void setInitialCondition ( String initialCondition ) { this.initialCondition = initialCondition; }
        @Basic()
        @Column(name="\"initialCondition\"")
        private String initialCondition ;
         
        /**
         * Percentage of initial life expectancy that has been lost as of the last
         * life expectancy baseline. Represents
         * (initial life expectancy - current life expectancy) / initial life expectancy.
         */
        public Double getInitialLossOfLife () { return initialLossOfLife; }
        public void setInitialLossOfLife ( Double initialLossOfLife ) { this.initialLossOfLife = initialLossOfLife; }
        @Basic()
        @Column(name="\"initialLossOfLife\"")
        private Double initialLossOfLife ;
         
        /**
         * Installation code.
         */
        public String getInstallCode () { return installCode; }
        public void setInstallCode ( String installCode ) { this.installCode = installCode; }
        @Basic()
        @Column(name="\"installCode\"")
        private String installCode ;
         
        /**
         * Indication of whether asset is currently deployed (in use), ready to be
         * put into use or not available for use.
         */
        public InUseStateKind getInUseState () { return inUseState; }
        public void setInUseState ( InUseStateKind inUseState ) { this.inUseState = inUseState; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"inUseState\"")
        private InUseStateKind inUseState ;
         
        /**
         * Kind of asset. Used in description of asset components in asset instance
         * templates.
         */
        public AssetKind getKind () { return kind; }
        public void setKind ( AssetKind kind ) { this.kind = kind; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"kind\"")
        private AssetKind kind ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
    }
    /**
     * Set of values obtained from the meter.
     */
    @Entity
    @Table(name="\"MeterReading\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class MeterReading
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Usage point from which this meter reading (set of values) has been obtained.
         */
        public UsagePoint getUsagePoint () { return usagePoint; }
        public void setUsagePoint ( UsagePoint usagePoint ) { this.usagePoint = usagePoint; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"UsagePoint\"")
        private UsagePoint usagePoint ;
         
    }
    /**
     * The Name class provides the means to define any number of human readable
     * names for an object. A name is <b>not</b> to be used for defining inter-object
     * relationships. For inter-object relationships instead use the object identification
     * 'mRID'.
     */
    @Entity
    @Table(name="\"Name\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Name
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Any free text that name the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Identified object that this name designates.
         */
        public IdentifiedObject getIdentifiedObject () { return identifiedObject; }
        public void setIdentifiedObject ( IdentifiedObject identifiedObject ) { this.identifiedObject = identifiedObject; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"IdentifiedObject\"")
        private IdentifiedObject identifiedObject ;
         
        /**
         * Type of this name.
         */
        public NameType getNameType () { return nameType; }
        public void setNameType ( NameType nameType ) { this.nameType = nameType; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"NameType\"")
        private NameType nameType ;
         
    }
     
    /**
     * Reason asset retired.
     */
    @Entity
    @Table(name="\"RetiredReasonKind\"")
    public static class RetiredReasonKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * Logical or physical point in the network to which readings or events may
     * be attributed. Used at the place where a physical or virtual meter may
     * be located; however, it is not required that a meter be present.
     */
    @Entity
    @Table(name="\"UsagePoint\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class UsagePoint
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
    }
     
    public static final Class[] allClasses = new Class[]
    {
        Asset.class,
        AssetInfo.class,
        AssetKind.class,
        AssetLifecycleStateKind.class,
        CatalogAssetType.class,
        EndDevice.class,
        ErpInventory.class,
        Meter.class,
        MeterReading.class,
        Name.class,
        RetiredReasonKind.class,
        UsagePoint.class
    };
}
