package au.com.langdale.cimtool.generated;
import javax.persistence.*;
/**
 * Annotated java for CSIS-OMS-Profile
 * Generated by CIMTool http://cimtool.org
 */
public class CSIS-OMS-Profile
{
    /**
     * Records activity for an entity at a point in time; activity may be for
     * an event that has already occurred or for a planned activity.
     */
    @Entity
    @Table(name="\"ActivityRecord\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class ActivityRecord
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Date and time this activity record has been created (different from the
         * 'status.dateTime', which is the time of a status change of the associated
         * object, if applicable).
         */
        public String getCreatedDateTime () { return createdDateTime; }
        public void setCreatedDateTime ( String createdDateTime ) { this.createdDateTime = createdDateTime; }
        @Basic()
        @Column(name="\"createdDateTime\"")
        private String createdDateTime ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Reason for event resulting in this activity record, typically supplied
         * when user initiated.
         */
        public String getReason () { return reason; }
        public void setReason ( String reason ) { this.reason = reason; }
        @Basic()
        @Column(name="\"reason\"")
        private String reason ;
         
        /**
         * Severity level of event resulting in this activity record.
         */
        public String getSeverity () { return severity; }
        public void setSeverity ( String severity ) { this.severity = severity; }
        @Basic()
        @Column(name="\"severity\"")
        private String severity ;
         
        /**
         * Type of event resulting in this activity record.
         */
        public String getType () { return type; }
        public void setType ( String type ) { this.type = type; }
        @Basic()
        @Column(name="\"type\"")
        private String type ;
         
    }
    /**
     * Person who accepted/signed or rejected the document.
     */
    @Entity
    @Table(name="\"Approver\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Approver
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Person having this role.
         */
        public Person getPerson () { return person; }
        public void setPerson ( Person person ) { this.person = person; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"Person\"")
        private Person person ;
         
    }
    /**
     * Tangible resource of the utility, including power system equipment, various
     * end devices, cabinets, buildings, etc. For electrical network equipment,
     * the role of the asset is defined through PowerSystemResource and its subclasses,
     * defined mainly in the Wires model (refer to IEC61970-301 and model package
     * IEC61970::Wires). Asset description places emphasis on the physical characteristics
     * of the equipment fulfilling that role.
     */
    @Entity
    @Table(name="\"Asset\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Asset
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The aliasName is free text human readable name of the object alternative
         * to IdentifiedObject.name. It may be non unique and may not correlate to
         * a naming hierarchy.
         * The attribute aliasName is retained because of backwards compatibility
         * between CIM relases. It is however recommended to replace aliasName with
         * the Name class as aliasName is planned for retirement at a future time.
         */
        public String getAliasName () { return aliasName; }
        public void setAliasName ( String aliasName ) { this.aliasName = aliasName; }
        @Basic()
        @Column(name="\"aliasName\"")
        private String aliasName ;
         
        /**
         * Kind of asset. Used in description of asset components in asset instance
         * templates.
         */
        public AssetKind getKind () { return kind; }
        public void setKind ( AssetKind kind ) { this.kind = kind; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"kind\"")
        private AssetKind kind ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
    }
    /**
     * Coordinate reference system.
     */
    @Entity
    @Table(name="\"CoordinateSystem\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class CoordinateSystem
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * A Uniform Resource Name (URN) for the coordinate reference system (crs)
         * used to define 'Location.PositionPoints'.
         * An example would be the European Petroleum Survey Group (EPSG) code for
         * a coordinate reference system, defined in URN under the Open Geospatial
         * Consortium (OGC) namespace as: urn:ogc:def:crs:EPSG::XXXX, where XXXX is
         * an EPSG code (a full list of codes can be found at the EPSG Registry web
         * site http://www.epsg-registry.org/). To define the coordinate system as
         * being WGS84 (latitude, longitude) using an EPSG OGC, this attribute would
         * be urn:ogc:def:crs:EPSG::4.3.2.6
         * A profile should limit this code to a set of allowed URNs agreed to by
         * all sending and receiving parties.
         */
        public String getCrsUrn () { return crsUrn; }
        public void setCrsUrn ( String crsUrn ) { this.crsUrn = crsUrn; }
        @Basic()
        @Column(name="\"crsUrn\"")
        private String crsUrn ;
         
    }
    /**
     * Organisation receiving services from service supplier.
     */
    @Entity
    @Table(name="\"Customer\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Customer
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Kind of customer.
         */
        public String getKind () { return kind; }
        public void setKind ( String kind ) { this.kind = kind; }
        @Basic()
        @Column(name="\"kind\"")
        private String kind ;
         
    }
     
    /**
     * Kind of customer.
     */
    @Entity
    @Table(name="\"CustomerKind\"")
    public static class CustomerKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * Conditions for notifying the customer about the changes in the status of
     * their service (e.g., outage restore, estimated restoration time, tariff
     * or service level change, etc.)
     */
    @Entity
    @Table(name="\"CustomerNotification\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class CustomerNotification
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Type of contact (e.g., phone, email, etc.).
         */
        public String getContactType () { return contactType; }
        public void setContactType ( String contactType ) { this.contactType = contactType; }
        @Basic()
        @Column(name="\"contactType\"")
        private String contactType ;
         
        /**
         * Value of contact type (e.g., phone number, email address, etc.).
         */
        public String getContactValue () { return contactValue; }
        public void setContactValue ( String contactValue ) { this.contactValue = contactValue; }
        @Basic()
        @Column(name="\"contactValue\"")
        private String contactValue ;
         
        /**
         * Earliest date time to call the customer.
         */
        public String getEarliestDateTimeToCall () { return earliestDateTimeToCall; }
        public void setEarliestDateTimeToCall ( String earliestDateTimeToCall ) { this.earliestDateTimeToCall = earliestDateTimeToCall; }
        @Basic()
        @Column(name="\"earliestDateTimeToCall\"")
        private String earliestDateTimeToCall ;
         
        /**
         * Latest date time to call the customer.
         */
        public String getLatestDateTimeToCall () { return latestDateTimeToCall; }
        public void setLatestDateTimeToCall ( String latestDateTimeToCall ) { this.latestDateTimeToCall = latestDateTimeToCall; }
        @Basic()
        @Column(name="\"latestDateTimeToCall\"")
        private String latestDateTimeToCall ;
         
        /**
         * Trigger for this notification.
         */
        public String getTrigger () { return trigger; }
        public void setTrigger ( String trigger ) { this.trigger = trigger; }
        @Basic()
        @Column(name="\"trigger\"")
        private String trigger ;
         
    }
    /**
     * The place, scene, or point of something where someone or something has
     * been, is, and/or will be at a given moment in time. It can be defined with
     * one or more position points (coordinates) in a given coordinate system.
     */
    @Entity
    @Table(name="\"Location\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Location
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * (if applicable) Direction that allows field crews to quickly find a given
         * asset. For a given location, such as a street address, this is the relative
         * direction in which to find the asset. For example, a streetlight may be
         * located at the 'NW' (northwest) corner of the customer's site, or a usage
         * point may be located on the second floor of an apartment building.
         */
        public String getDirection () { return direction; }
        public void setDirection ( String direction ) { this.direction = direction; }
        @Basic()
        @Column(name="\"direction\"")
        private String direction ;
         
        /**
         * (if applicable) Reference to geographical information source, often external
         * to the utility.
         */
        public String getGeoInfoReference () { return geoInfoReference; }
        public void setGeoInfoReference ( String geoInfoReference ) { this.geoInfoReference = geoInfoReference; }
        @Basic()
        @Column(name="\"geoInfoReference\"")
        private String geoInfoReference ;
         
        /**
         * Classification by utility's corporate standards and practices, relative
         * to the location itself (e.g., geographical, functional accounting, etc.,
         * not a given property that happens to exist at that location).
         */
        public String getType () { return type; }
        public void setType ( String type ) { this.type = type; }
        @Basic()
        @Column(name="\"type\"")
        private String type ;
         
        /**
         * Coordinate system used to describe position points of this location.
         */
        public CoordinateSystem getCoordinateSystem () { return coordinateSystem; }
        public void setCoordinateSystem ( CoordinateSystem coordinateSystem ) { this.coordinateSystem = coordinateSystem; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"CoordinateSystem\"")
        private CoordinateSystem coordinateSystem ;
         
    }
    /**
     * The Name class provides the means to define any number of human readable
     * names for an object. A name is <b>not</b> to be used for defining inter-object
     * relationships. For inter-object relationships instead use the object identification
     * 'mRID'.
     */
    @Entity
    @Table(name="\"Name\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Name
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Any free text that name the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Identified object that this name designates.
         */
        public IdentifiedObject getIdentifiedObject () { return identifiedObject; }
        public void setIdentifiedObject ( IdentifiedObject identifiedObject ) { this.identifiedObject = identifiedObject; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"IdentifiedObject\"")
        private IdentifiedObject identifiedObject ;
         
        /**
         * Type of this name.
         */
        public NameType getNameType () { return nameType; }
        public void setNameType ( NameType nameType ) { this.nameType = nameType; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"NameType\"")
        private NameType nameType ;
         
    }
    /**
     * Type of name. Possible values for attribute 'name' are implementation dependent
     * but standard profiles may specify types. An enterprise may have multiple
     * IT systems each having its own local name for the same object, e.g. a planning
     * system may have different names from an EMS. An object may also have different
     * names within the same IT system, e.g. localName as defined in CIM version
     * 14. The definition from CIM14 is:
     * The localName is a human readable name of the object. It is a free text
     * name local to a node in a naming hierarchy similar to a file directory
     * structure. A power system related naming hierarchy may be: Substation,
     * VoltageLevel, Equipment etc. Children of the same parent in such a hierarchy
     * have names that typically are unique among them.
     */
    @Entity
    @Table(name="\"NameType\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class NameType
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Description of the name type.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * Name of the name type.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Authority responsible for managing names of this type.
         */
        public NameTypeAuthority getNameTypeAuthority () { return nameTypeAuthority; }
        public void setNameTypeAuthority ( NameTypeAuthority nameTypeAuthority ) { this.nameTypeAuthority = nameTypeAuthority; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"NameTypeAuthority\"")
        private NameTypeAuthority nameTypeAuthority ;
         
    }
    /**
     * Authority responsible for creation and management of names of a given type;
     * typically an organization or an enterprise system.
     */
    @Entity
    @Table(name="\"NameTypeAuthority\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class NameTypeAuthority
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Description of the name type authority.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * Name of the name type authority.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
    }
     
    /**
     * Kind of trigger to notify customer.
     */
    @Entity
    @Table(name="\"NotificationTriggerKind\"")
    public static class NotificationTriggerKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * A real estate location, commonly referred to as premises.
     */
    @Entity
    @Table(name="\"ServiceLocation\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class ServiceLocation
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Method for the service person to access this service location. For example,
         * a description of where to obtain a key if the facility is unmanned and
         * secured.
         */
        public String getAccessMethod () { return accessMethod; }
        public void setAccessMethod ( String accessMethod ) { this.accessMethod = accessMethod; }
        @Basic()
        @Column(name="\"accessMethod\"")
        private String accessMethod ;
         
        /**
         * True if inspection is needed of facilities at this service location. This
         * could be requested by a customer, due to suspected tampering, environmental
         * concerns (e.g., a fire in the vicinity), or to correct incompatible data.
         */
        public Boolean getNeedsInspection () { return needsInspection; }
        public void setNeedsInspection ( Boolean needsInspection ) { this.needsInspection = needsInspection; }
        @Basic()
        @Column(name="\"needsInspection\"")
        private Boolean needsInspection ;
         
        /**
         * Problems previously encountered when visiting or performing work on this
         * location. Examples include: bad dog, violent customer, verbally abusive
         * occupant, obstructions, safety hazards, etc.
         */
        public String getSiteAccessProblem () { return siteAccessProblem; }
        public void setSiteAccessProblem ( String siteAccessProblem ) { this.siteAccessProblem = siteAccessProblem; }
        @Basic()
        @Column(name="\"siteAccessProblem\"")
        private String siteAccessProblem ;
         
    }
    /**
     * Trouble order sends an incident to a crew to initiate a response to an
     * unplanned outage.
     */
    @Entity
    @Table(name="\"TroubleOrder\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class TroubleOrder
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Name of the author of this document.
         */
        public String getAuthorName () { return authorName; }
        public void setAuthorName ( String authorName ) { this.authorName = authorName; }
        @Basic()
        @Column(name="\"authorName\"")
        private String authorName ;
         
        /**
         * Free-form comment associated with the trouble order.
         */
        public String getComment () { return comment; }
        public void setComment ( String comment ) { this.comment = comment; }
        @Basic()
        @Column(name="\"comment\"")
        private String comment ;
         
        /**
         * Free text comment.
         */
        public String getComment () { return comment; }
        public void setComment ( String comment ) { this.comment = comment; }
        @Basic()
        @Column(name="\"comment\"")
        private String comment ;
         
        /**
         * Date and time that this document was created.
         */
        public String getCreatedDateTime () { return createdDateTime; }
        public void setCreatedDateTime ( String createdDateTime ) { this.createdDateTime = createdDateTime; }
        @Basic()
        @Column(name="\"createdDateTime\"")
        private String createdDateTime ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * Status of this document. For status of subject matter this document represents
         * (e.g., Agreement, Work), use 'status' attribute.
         * Example values for 'docStatus.status' are draft, approved, cancelled, etc.
         */
        public Status getDocStatus () { return docStatus; }
        public void setDocStatus ( Status docStatus ) { this.docStatus = docStatus; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"docStatus\"")
        private Status docStatus ;
         
        /**
         * Electronic address.
         */
        public ElectronicAddress getElectronicAddress () { return electronicAddress; }
        public void setElectronicAddress ( ElectronicAddress electronicAddress ) { this.electronicAddress = electronicAddress; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"electronicAddress\"")
        private ElectronicAddress electronicAddress ;
         
        /**
         * Issuer of this document.
         */
        public Issuer getIssuer () { return issuer; }
        public void setIssuer ( Issuer issuer ) { this.issuer = issuer; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"Issuer\"")
        private Issuer issuer ;
         
        /**
         * Status of subject matter (e.g., Agreement, Work) this document represents.
         * For status of the document itself, use 'docStatus' attribute.
         */
        public Status getStatus () { return status; }
        public void setStatus ( Status status ) { this.status = status; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"status\"")
        private Status status ;
         
    }
     
    /**
     * Kind of trouble reporting.
     */
    @Entity
    @Table(name="\"TroubleReportingKind\"")
    public static class TroubleReportingKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     */
    @Entity
    @Table(name="\"TroubleTicket\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class TroubleTicket
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Free-form comment associated with the trouble call for example, "customer
         * reported a large flash", etc.
         */
        public String getComment () { return comment; }
        public void setComment ( String comment ) { this.comment = comment; }
        @Basic()
        @Column(name="\"comment\"")
        private String comment ;
         
        /**
         * Date and time the trouble has been reported.
         */
        public String getDateTimeOfReport () { return dateTimeOfReport; }
        public void setDateTimeOfReport ( String dateTimeOfReport ) { this.dateTimeOfReport = dateTimeOfReport; }
        @Basic()
        @Column(name="\"dateTimeOfReport\"")
        private String dateTimeOfReport ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * Indicates whether the first responder such as police, fire department etc.has
         * been notified and whether they are on site or en route.
         */
        public String getFirstResponderStatus () { return firstResponderStatus; }
        public void setFirstResponderStatus ( String firstResponderStatus ) { this.firstResponderStatus = firstResponderStatus; }
        @Basic()
        @Column(name="\"firstResponderStatus\"")
        private String firstResponderStatus ;
         
        /**
         * Set to true if the outage report indicated that other neighbors are also
         * out of power.
         */
        public Boolean getMultiplePremises () { return multiplePremises; }
        public void setMultiplePremises ( Boolean multiplePremises ) { this.multiplePremises = multiplePremises; }
        @Basic()
        @Column(name="\"multiplePremises\"")
        private Boolean multiplePremises ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Indicates how the customer reported trouble.
         */
        public String getReportingKind () { return reportingKind; }
        public void setReportingKind ( String reportingKind ) { this.reportingKind = reportingKind; }
        @Basic()
        @Column(name="\"reportingKind\"")
        private String reportingKind ;
         
        /**
         * Date and time this trouble ticket has been resolved.
         */
        public String getResolvedDateTime () { return resolvedDateTime; }
        public void setResolvedDateTime ( String resolvedDateTime ) { this.resolvedDateTime = resolvedDateTime; }
        @Basic()
        @Column(name="\"resolvedDateTime\"")
        private String resolvedDateTime ;
         
        /**
         * Trouble code (e.g., power down, flickering lights, partial power, etc).
         */
        public String getTroubleCode () { return troubleCode; }
        public void setTroubleCode ( String troubleCode ) { this.troubleCode = troubleCode; }
        @Basic()
        @Column(name="\"troubleCode\"")
        private String troubleCode ;
         
        /**
         * Customer for whom this trouble ticket is relevant.
         */
        public Customer getCustomer () { return customer; }
        public void setCustomer ( Customer customer ) { this.customer = customer; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"Customer\"")
        private Customer customer ;
         
        /**
         * Incident reported in this trouble ticket
         */
        public Incident getIncident () { return incident; }
        public void setIncident ( Incident incident ) { this.incident = incident; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"Incident\"")
        private Incident incident ;
         
        /**
         */
        public Location getLocation () { return location; }
        public void setLocation ( Location location ) { this.location = location; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"Location\"")
        private Location location ;
         
        /**
         * The service location to which one or more trouble tickets are associated.
         */
        public ServiceLocation getServiceLocation () { return serviceLocation; }
        public void setServiceLocation ( ServiceLocation serviceLocation ) { this.serviceLocation = serviceLocation; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"ServiceLocation\"")
        private ServiceLocation serviceLocation ;
         
        /**
         * The order to which one or more trouble tickets are associated.
         */
        public TroubleOrder getTroubleOrder () { return troubleOrder; }
        public void setTroubleOrder ( TroubleOrder troubleOrder ) { this.troubleOrder = troubleOrder; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"TroubleOrder\"")
        private TroubleOrder troubleOrder ;
         
    }
    /**
     * Document used to request, initiate, track and record work.
     */
    @Entity
    @Table(name="\"Work\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Work
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The aliasName is free text human readable name of the object alternative
         * to IdentifiedObject.name. It may be non unique and may not correlate to
         * a naming hierarchy.
         * The attribute aliasName is retained because of backwards compatibility
         * between CIM relases. It is however recommended to replace aliasName with
         * the Name class as aliasName is planned for retirement at a future time.
         */
        public String getAliasName () { return aliasName; }
        public void setAliasName ( String aliasName ) { this.aliasName = aliasName; }
        @Basic()
        @Column(name="\"aliasName\"")
        private String aliasName ;
         
        /**
         * Date and time that this document was created.
         */
        public String getCreatedDateTime () { return createdDateTime; }
        public void setCreatedDateTime ( String createdDateTime ) { this.createdDateTime = createdDateTime; }
        @Basic()
        @Column(name="\"createdDateTime\"")
        private String createdDateTime ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * Kind of work.
         */
        public ServiceRequestKind getKind () { return kind; }
        public void setKind ( ServiceRequestKind kind ) { this.kind = kind; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"kind\"")
        private ServiceRequestKind kind ;
         
        /**
         * Date and time this document was last modified. Documents may potentially
         * be modified many times during their lifetime.
         */
        public String getLastModifiedDateTime () { return lastModifiedDateTime; }
        public void setLastModifiedDateTime ( String lastModifiedDateTime ) { this.lastModifiedDateTime = lastModifiedDateTime; }
        @Basic()
        @Column(name="\"lastModifiedDateTime\"")
        private String lastModifiedDateTime ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Date and time work was requested.
         */
        public String getRequestDateTime () { return requestDateTime; }
        public void setRequestDateTime ( String requestDateTime ) { this.requestDateTime = requestDateTime; }
        @Basic()
        @Column(name="\"requestDateTime\"")
        private String requestDateTime ;
         
        /**
         * Kind of work status.
         */
        public String getStatusKind () { return statusKind; }
        public void setStatusKind ( String statusKind ) { this.statusKind = statusKind; }
        @Basic()
        @Column(name="\"statusKind\"")
        private String statusKind ;
         
        /**
         * Work order number (or other unique identifying information) for this work.
         */
        public String getWorkOrderNumber () { return workOrderNumber; }
        public void setWorkOrderNumber ( String workOrderNumber ) { this.workOrderNumber = workOrderNumber; }
        @Basic()
        @Column(name="\"workOrderNumber\"")
        private String workOrderNumber ;
         
        /**
         * Approver of this document.
         */
        public Approver getApprover () { return approver; }
        public void setApprover ( Approver approver ) { this.approver = approver; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"Approver\"")
        private Approver approver ;
         
    }
    /**
     * Records information about the status of work or work task at a point in
     * time.
     */
    @Entity
    @Table(name="\"WorkActivityRecord\"")
    @PrimaryKeyJoinColumn(name="\"mRID\"")
    public static class WorkActivityRecord extends ActivityRecord
    {
        /**
         * Date and time this activity record has been created (different from the
         * 'status.dateTime', which is the time of a status change of the associated
         * object, if applicable).
         */
        public String getCreatedDateTime () { return createdDateTime; }
        public void setCreatedDateTime ( String createdDateTime ) { this.createdDateTime = createdDateTime; }
        @Basic()
        @Column(name="\"createdDateTime\"")
        private String createdDateTime ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Estimated percentage of completion of this individual work task or overall
         * work order.
         */
        public Double getPercentComplete () { return percentComplete; }
        public void setPercentComplete ( Double percentComplete ) { this.percentComplete = percentComplete; }
        @Basic()
        @Column(name="\"percentComplete\"")
        private Double percentComplete ;
         
        /**
         * Reason for event resulting in this activity record, typically supplied
         * when user initiated.
         */
        public String getReason () { return reason; }
        public void setReason ( String reason ) { this.reason = reason; }
        @Basic()
        @Column(name="\"reason\"")
        private String reason ;
         
        /**
         * Severity level of event resulting in this activity record.
         */
        public String getSeverity () { return severity; }
        public void setSeverity ( String severity ) { this.severity = severity; }
        @Basic()
        @Column(name="\"severity\"")
        private String severity ;
         
        /**
         * Type of event resulting in this activity record.
         */
        public String getType () { return type; }
        public void setType ( String type ) { this.type = type; }
        @Basic()
        @Column(name="\"type\"")
        private String type ;
         
        /**
         * Base work that this activity record tracks.
         */
        public BaseWork getBaseWork () { return baseWork; }
        public void setBaseWork ( BaseWork baseWork ) { this.baseWork = baseWork; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"BaseWork\"")
        private BaseWork baseWork ;
         
        /**
         * Information on consequence of event resulting in this activity record.
         */
        public Status getStatus () { return status; }
        public void setStatus ( Status status ) { this.status = status; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"status\"")
        private Status status ;
         
    }
     
    /**
     * Kind of status, specific to work.
     */
    @Entity
    @Table(name="\"WorkStatusKind\"")
    public static class WorkStatusKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * A task within a set of work.
     */
    @Entity
    @Table(name="\"WorkTask\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class WorkTask
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Date and time work task was completed.
         */
        public String getCompletedDateTime () { return completedDateTime; }
        public void setCompletedDateTime ( String completedDateTime ) { this.completedDateTime = completedDateTime; }
        @Basic()
        @Column(name="\"completedDateTime\"")
        private String completedDateTime ;
         
        /**
         * Total contractor costs associated with the work task.
         */
        public String getContractorCost () { return contractorCost; }
        public void setContractorCost ( String contractorCost ) { this.contractorCost = contractorCost; }
        @Basic()
        @Column(name="\"contractorCost\"")
        private String contractorCost ;
         
        /**
         * Estimated time of arrival, so that customer or police/fire department can
         * be informed when the crew will arrive.
         */
        public String getCrewETA () { return crewETA; }
        public void setCrewETA ( String crewETA ) { this.crewETA = crewETA; }
        @Basic()
        @Column(name="\"crewETA\"")
        private String crewETA ;
         
        /**
         * Time and Date when the work task will be completed.
         */
        public String getEstimatedCompletionTime () { return estimatedCompletionTime; }
        public void setEstimatedCompletionTime ( String estimatedCompletionTime ) { this.estimatedCompletionTime = estimatedCompletionTime; }
        @Basic()
        @Column(name="\"estimatedCompletionTime\"")
        private String estimatedCompletionTime ;
         
        /**
         * Instructions for performing this task.
         */
        public String getInstruction () { return instruction; }
        public void setInstruction ( String instruction ) { this.instruction = instruction; }
        @Basic()
        @Column(name="\"instruction\"")
        private String instruction ;
         
        /**
         * Total labor costs associated with the work task.
         */
        public String getLaborCost () { return laborCost; }
        public void setLaborCost ( String laborCost ) { this.laborCost = laborCost; }
        @Basic()
        @Column(name="\"laborCost\"")
        private String laborCost ;
         
        /**
         * Hours of labor expended under work task.
         */
        public Double getLaborHours () { return laborHours; }
        public void setLaborHours ( Double laborHours ) { this.laborHours = laborHours; }
        @Basic()
        @Column(name="\"laborHours\"")
        private Double laborHours ;
         
        /**
         * Total material costs associated with the work task.
         */
        public String getMateriallCost () { return materiallCost; }
        public void setMateriallCost ( String materiallCost ) { this.materiallCost = materiallCost; }
        @Basic()
        @Column(name="\"materiallCost\"")
        private String materiallCost ;
         
    }
     
    public static final Class[] allClasses = new Class[]
    {
        ActivityRecord.class,
        Approver.class,
        Asset.class,
        CoordinateSystem.class,
        Customer.class,
        CustomerKind.class,
        CustomerNotification.class,
        Location.class,
        Name.class,
        NameType.class,
        NameTypeAuthority.class,
        NotificationTriggerKind.class,
        ServiceLocation.class,
        TroubleOrder.class,
        TroubleReportingKind.class,
        TroubleTicket.class,
        Work.class,
        WorkActivityRecord.class,
        WorkStatusKind.class,
        WorkTask.class
    };
}
