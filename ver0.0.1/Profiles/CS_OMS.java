package au.com.langdale.cimtool.generated;
import javax.persistence.*;
/**
 * Annotated java for Profile
 * Generated by CIMTool http://cimtool.org
 */
public class Profile
{
    /**
     * Organisation receiving services from service supplier.
     */
    @Entity
    @Table(name="\"Customer\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Customer
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * Kind of customer.
         */
        public String getKind () { return kind; }
        public void setKind ( String kind ) { this.kind = kind; }
        @Basic()
        @Column(name="\"kind\"")
        private String kind ;
         
        /**
         * Locale designating language to use in communications with this customer.
         */
        public String getLocale () { return locale; }
        public void setLocale ( String locale ) { this.locale = locale; }
        @Basic()
        @Column(name="\"locale\"")
        private String locale ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * (deprecated) (use 'priority' instead) True if this is an important customer.
         * Importance is for matters different than those in 'specialNeed' attribute.
         */
        public Boolean getVip () { return vip; }
        public void setVip ( Boolean vip ) { this.vip = vip; }
        @Basic()
        @Column(name="\"vip\"")
        private Boolean vip ;
         
        /**
         * Organisation having this role.
         */
        public Organisation getOrganisation () { return organisation; }
        public void setOrganisation ( Organisation organisation ) { this.organisation = organisation; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"Organisation\"")
        private Organisation organisation ;
         
        /**
         * Status of this customer.
         */
        public Status getStatus () { return status; }
        public void setStatus ( Status status ) { this.status = status; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"status\"")
        private Status status ;
         
    }
    /**
     * Assignment of a group of products and services purchased by the customer
     * through a customer agreement, used as a mechanism for customer billing
     * and payment. It contains common information from the various types of customer
     * agreements to create billings (invoices) for a customer and receive payment.
     */
    @Entity
    @Table(name="\"CustomerAccount\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class CustomerAccount
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Cycle day on which the associated customer account will normally be billed,
         * used to determine when to produce the billing.
         */
        public String getBillingCycle () { return billingCycle; }
        public void setBillingCycle ( String billingCycle ) { this.billingCycle = billingCycle; }
        @Basic()
        @Column(name="\"billingCycle\"")
        private String billingCycle ;
         
        /**
         * Date and time that this document was created.
         */
        public String getCreatedDateTime () { return createdDateTime; }
        public void setCreatedDateTime ( String createdDateTime ) { this.createdDateTime = createdDateTime; }
        @Basic()
        @Column(name="\"createdDateTime\"")
        private String createdDateTime ;
         
        /**
         * The last amount that will be billed to the customer prior to shut off of
         * the account.
         */
        public String getLastBillAmount () { return lastBillAmount; }
        public void setLastBillAmount ( String lastBillAmount ) { this.lastBillAmount = lastBillAmount; }
        @Basic()
        @Column(name="\"lastBillAmount\"")
        private String lastBillAmount ;
         
        /**
         * Date and time this document was last modified. Documents may potentially
         * be modified many times during their lifetime.
         */
        public String getLastModifiedDateTime () { return lastModifiedDateTime; }
        public void setLastModifiedDateTime ( String lastModifiedDateTime ) { this.lastModifiedDateTime = lastModifiedDateTime; }
        @Basic()
        @Column(name="\"lastModifiedDateTime\"")
        private String lastModifiedDateTime ;
         
        /**
         * Document title.
         */
        public String getTitle () { return title; }
        public void setTitle ( String title ) { this.title = title; }
        @Basic()
        @Column(name="\"title\"")
        private String title ;
         
        /**
         * Meter read schedule that applies to the customer account
         */
        public MeterReadSchedule getMeterReadSchedule () { return meterReadSchedule; }
        public void setMeterReadSchedule ( MeterReadSchedule meterReadSchedule ) { this.meterReadSchedule = meterReadSchedule; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"MeterReadSchedule\"")
        private MeterReadSchedule meterReadSchedule ;
         
    }
    /**
     * Agreement between the customer and the service supplier to pay for service
     * at a specific service location. It records certain billing information
     * about the type of service provided at the service location and is used
     * during charge creation to determine the type of service.
     */
    @Entity
    @Table(name="\"CustomerAgreement\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class CustomerAgreement
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
    }
     
    /**
     * Kind of customer.
     */
    @Entity
    @Table(name="\"CustomerKind\"")
    public static class CustomerKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * Asset container that performs one or more end device functions. One type
     * of end device is a meter which can perform metering, load management, connect/disconnect,
     * accounting functions, etc. Some end devices, such as ones monitoring and
     * controlling air conditioners, refrigerators, pool pumps may be connected
     * to a meter. All end devices may have communication capability defined by
     * the associated communication function(s). An end device may be owned by
     * a consumer, a service provider, utility or otherwise.
     * There may be a related end device function that identifies a sensor or
     * control point within a metering application or communications systems (e.g.,
     * water, gas, electricity).
     * Some devices may use an optical port that conforms to the ANSI C12.18 standard
     * for communications.
     */
    @Entity
    @Table(name="\"EndDevice\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class EndDevice
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * A code used to specify the connection category, e.g. low voltage, where
         * the meter operates.
         */
        public String getConnectionCategory () { return connectionCategory; }
        public void setConnectionCategory ( String connectionCategory ) { this.connectionCategory = connectionCategory; }
        @Basic(optional=true)
        @Column(name="\"connectionCategory\"")
        private String connectionCategory ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
    }
    /**
     * A roll up of invoice line items. The whole invoice has a due date and amount
     * to be paid, with information such as customer, banks etc. being obtained
     * through associations. The invoice roll up is based on individual line items
     * that each contain amounts and descriptions for specific services or products.
     */
    @Entity
    @Table(name="\"ErpInvoice\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class ErpInvoice
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Kind of media by which the CustomerBillingInfo was delivered.
         */
        public BillMediaKind getBillMediaKind () { return billMediaKind; }
        public void setBillMediaKind ( BillMediaKind billMediaKind ) { this.billMediaKind = billMediaKind; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"billMediaKind\"")
        private BillMediaKind billMediaKind ;
         
        /**
         * Calculated date upon which the Invoice amount is due.
         */
        public String getDueDate () { return dueDate; }
        public void setDueDate ( String dueDate ) { this.dueDate = dueDate; }
        @Basic()
        @Column(name="\"dueDate\"")
        private String dueDate ;
         
        /**
         * Kind of invoice (default is 'sales').
         */
        public ErpInvoiceKind getKind () { return kind; }
        public void setKind ( ErpInvoiceKind kind ) { this.kind = kind; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"kind\"")
        private ErpInvoiceKind kind ;
         
        /**
         * Date on which the customer billing statement/invoice was printed/mailed.
         */
        public String getMailedDate () { return mailedDate; }
        public void setMailedDate ( String mailedDate ) { this.mailedDate = mailedDate; }
        @Basic()
        @Column(name="\"mailedDate\"")
        private String mailedDate ;
         
        /**
         * Number of an invoice to be reference by this invoice.
         */
        public String getReferenceNumber () { return referenceNumber; }
        public void setReferenceNumber ( String referenceNumber ) { this.referenceNumber = referenceNumber; }
        @Basic()
        @Column(name="\"referenceNumber\"")
        private String referenceNumber ;
         
    }
    /**
     * Physical asset that performs the metering role of the usage point. Used
     * for measuring consumption and detection of events.
     */
    @Entity
    @Table(name="\"Meter\"")
    @PrimaryKeyJoinColumn(name="\"mRID\"")
    public static class Meter extends EndDevice
    {
        /**
         * A code used to specify the connection category, e.g. low voltage, where
         * the meter operates.
         */
        public String getConnectionCategory () { return connectionCategory; }
        public void setConnectionCategory ( String connectionCategory ) { this.connectionCategory = connectionCategory; }
        @Basic()
        @Column(name="\"connectionCategory\"")
        private String connectionCategory ;
         
    }
    /**
     */
    @Entity
    @Table(name="\"MeterReadSchedule\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class MeterReadSchedule
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
    }
    /**
     * General purpose information for name and other information to contact people.
     */
    @Entity
    @Table(name="\"OldPerson\"")
    @PrimaryKeyJoinColumn(name="\"mRID\"")
    public static class OldPerson extends Person
    {
    }
    /**
     * Organisation that might have roles as utility, contractor, supplier, manufacturer,
     * customer, etc.
     */
    @Entity
    @Table(name="\"Organisation\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Organisation
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The aliasName is free text human readable name of the object alternative
         * to IdentifiedObject.name. It may be non unique and may not correlate to
         * a naming hierarchy.
         * The attribute aliasName is retained because of backwards compatibility
         * between CIM relases. It is however recommended to replace aliasName with
         * the Name class as aliasName is planned for retirement at a future time.
         */
        public String getAliasName () { return aliasName; }
        public void setAliasName ( String aliasName ) { this.aliasName = aliasName; }
        @Basic()
        @Column(name="\"aliasName\"")
        private String aliasName ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
    }
    /**
     * General purpose information for name and other information to contact people.
     */
    @Entity
    @Table(name="\"Person\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Person
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Middle name(s) or initial(s).
         */
        public String getMName () { return mName; }
        public void setMName ( String mName ) { this.mName = mName; }
        @Basic()
        @Column(name="\"mName\"")
        private String mName ;
         
    }
    /**
     */
    @Entity
    @Table(name="\"ServiceRequest\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class ServiceRequest
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
    }
    /**
     * Date and time for which status 'value' applies.
     */
    public String getDateTime () { return dateTime; }
    public void setDateTime ( String dateTime ) { this.dateTime = dateTime; }
    @Basic()
    @Column(name="\"dateTime\"")
    private String dateTime ;
     
    /**
     * Reason code or explanation for why an object went to the current status
     * 'value'.
     */
    public String getReason () { return reason; }
    public void setReason ( String reason ) { this.reason = reason; }
    @Basic()
    @Column(name="\"reason\"")
    private String reason ;
     
    /**
     * Pertinent information regarding the current 'value', as free form text.
     */
    public String getRemark () { return remark; }
    public void setRemark ( String remark ) { this.remark = remark; }
    @Basic()
    @Column(name="\"remark\"")
    private String remark ;
     
    /**
     * Status value at 'dateTime'; prior status changes may have been kept in
     * instances of activity records associated with the object to which this
     * status applies.
     */
    public String getValue () { return value; }
    public void setValue ( String value ) { this.value = value; }
    @Basic()
    @Column(name="\"value\"")
    private String value ;
     
     
    public static final Class[] allClasses = new Class[]
    {
        Customer.class,
        CustomerAccount.class,
        CustomerAgreement.class,
        CustomerKind.class,
        EndDevice.class,
        ErpInvoice.class,
        Meter.class,
        MeterReadSchedule.class,
        OldPerson.class,
        Organisation.class,
        Person.class,
        ServiceRequest.class
    };
}
