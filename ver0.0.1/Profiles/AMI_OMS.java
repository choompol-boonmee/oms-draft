package au.com.langdale.cimtool.generated;
import javax.persistence.*;
/**
 * Annotated java for AMI_OMS_Profile
 * Generated by CIMTool http://cimtool.org
 */
public class AMI_OMS_Profile
{
     
    /**
     * Kinds of assets or asset components.
     */
    @Entity
    @Table(name="\"AssetKind\"")
    public static class AssetKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * Asset container that performs one or more end device functions. One type
     * of end device is a meter which can perform metering, load management, connect/disconnect,
     * accounting functions, etc. Some end devices, such as ones monitoring and
     * controlling air conditioners, refrigerators, pool pumps may be connected
     * to a meter. All end devices may have communication capability defined by
     * the associated communication function(s). An end device may be owned by
     * a consumer, a service provider, utility or otherwise.
     * There may be a related end device function that identifies a sensor or
     * control point within a metering application or communications systems (e.g.,
     * water, gas, electricity).
     * Some devices may use an optical port that conforms to the ANSI C12.18 standard
     * for communications.
     */
    @Entity
    @Table(name="\"EndDevice\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class EndDevice
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Automated meter reading (AMR) or other communication system responsible
         * for communications to this end device.
         */
        public String getAmrSystem () { return amrSystem; }
        public void setAmrSystem ( String amrSystem ) { this.amrSystem = amrSystem; }
        @Basic()
        @Column(name="\"amrSystem\"")
        private String amrSystem ;
         
        /**
         * Condition of asset at last baseline. Examples include new, rebuilt, overhaul
         * required, other. Refer to inspection data for information on the most current
         * condition of the asset.
         */
        public String getInitialCondition () { return initialCondition; }
        public void setInitialCondition ( String initialCondition ) { this.initialCondition = initialCondition; }
        @Basic()
        @Column(name="\"initialCondition\"")
        private String initialCondition ;
         
        /**
         * Percentage of initial life expectancy that has been lost as of the last
         * life expectancy baseline. Represents
         * (initial life expectancy - current life expectancy) / initial life expectancy.
         */
        public Double getInitialLossOfLife () { return initialLossOfLife; }
        public void setInitialLossOfLife ( Double initialLossOfLife ) { this.initialLossOfLife = initialLossOfLife; }
        @Basic()
        @Column(name="\"initialLossOfLife\"")
        private Double initialLossOfLife ;
         
        /**
         * Installation code.
         */
        public String getInstallCode () { return installCode; }
        public void setInstallCode ( String installCode ) { this.installCode = installCode; }
        @Basic()
        @Column(name="\"installCode\"")
        private String installCode ;
         
        /**
         * Indication of whether asset is currently deployed (in use), ready to be
         * put into use or not available for use.
         */
        public InUseStateKind getInUseState () { return inUseState; }
        public void setInUseState ( InUseStateKind inUseState ) { this.inUseState = inUseState; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"inUseState\"")
        private InUseStateKind inUseState ;
         
        /**
         * Kind of asset. Used in description of asset components in asset instance
         * templates.
         */
        public String getKind () { return kind; }
        public void setKind ( String kind ) { this.kind = kind; }
        @Basic()
        @Column(name="\"kind\"")
        private String kind ;
         
        /**
         * End device data.
         */
        public EndDeviceInfo getEndDeviceInfo () { return endDeviceInfo; }
        public void setEndDeviceInfo ( EndDeviceInfo endDeviceInfo ) { this.endDeviceInfo = endDeviceInfo; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"EndDeviceInfo\"")
        private EndDeviceInfo endDeviceInfo ;
         
    }
    /**
     * Action/command performed by an end device on a device other than the end
     * device.
     */
    @Entity
    @Table(name="\"EndDeviceAction\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class EndDeviceAction
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Command text.
         */
        public String getCommand () { return command; }
        public void setCommand ( String command ) { this.command = command; }
        @Basic()
        @Column(name="\"command\"")
        private String command ;
         
        /**
         * Start date and time for action of this control.
         */
        public String getStartDateTime () { return startDateTime; }
        public void setStartDateTime ( String startDateTime ) { this.startDateTime = startDateTime; }
        @Basic()
        @Column(name="\"startDateTime\"")
        private String startDateTime ;
         
    }
    /**
     * True if communication function is supported.
     */
    public Boolean getCommunication () { return communication; }
    public void setCommunication ( Boolean communication ) { this.communication = communication; }
    @Basic()
    @Column(name="\"communication\"")
    private Boolean communication ;
     
    /**
     * True if connect and disconnect function is supported.
     */
    public Boolean getConnectDisconnect () { return connectDisconnect; }
    public void setConnectDisconnect ( Boolean connectDisconnect ) { this.connectDisconnect = connectDisconnect; }
    @Basic()
    @Column(name="\"connectDisconnect\"")
    private Boolean connectDisconnect ;
     
    /**
     * True if electric metering function is supported.
     */
    public Boolean getElectricMetering () { return electricMetering; }
    public void setElectricMetering ( Boolean electricMetering ) { this.electricMetering = electricMetering; }
    @Basic()
    @Column(name="\"electricMetering\"")
    private Boolean electricMetering ;
     
    /**
     * True if metrology function is supported.
     */
    public Boolean getMetrology () { return metrology; }
    public void setMetrology ( Boolean metrology ) { this.metrology = metrology; }
    @Basic()
    @Column(name="\"metrology\"")
    private Boolean metrology ;
     
    /**
     * True if on request read function is supported.
     */
    public Boolean getOnRequestRead () { return onRequestRead; }
    public void setOnRequestRead ( Boolean onRequestRead ) { this.onRequestRead = onRequestRead; }
    @Basic()
    @Column(name="\"onRequestRead\"")
    private Boolean onRequestRead ;
     
    /**
     * True if outage history function is supported.
     */
    public Boolean getOutageHistory () { return outageHistory; }
    public void setOutageHistory ( Boolean outageHistory ) { this.outageHistory = outageHistory; }
    @Basic()
    @Column(name="\"outageHistory\"")
    private Boolean outageHistory ;
     
    /**
     * True if relays programming function is supported.
     */
    public Boolean getRelaysProgramming () { return relaysProgramming; }
    public void setRelaysProgramming ( Boolean relaysProgramming ) { this.relaysProgramming = relaysProgramming; }
    @Basic()
    @Column(name="\"relaysProgramming\"")
    private Boolean relaysProgramming ;
     
    /**
     * True if reverse flow function is supported.
     */
    public Boolean getReverseFlow () { return reverseFlow; }
    public void setReverseFlow ( Boolean reverseFlow ) { this.reverseFlow = reverseFlow; }
    @Basic()
    @Column(name="\"reverseFlow\"")
    private Boolean reverseFlow ;
     
    /**
     * True if device performs temperature compensation for metered quantities.
     */
    public Boolean getTemperatureCompensation () { return temperatureCompensation; }
    public void setTemperatureCompensation ( Boolean temperatureCompensation ) { this.temperatureCompensation = temperatureCompensation; }
    @Basic()
    @Column(name="\"temperatureCompensation\"")
    private Boolean temperatureCompensation ;
     
    /**
     * Instructs an end device (or an end device group) to perform a specified
     * action.
     */
    @Entity
    @Table(name="\"EndDeviceControl\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class EndDeviceControl
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Reason for the control action that allows to determine how to continue
         * processing. For example, disconnect meter command may require different
         * processing by the receiving system if it has been issued for a network-related
         * reason (protection) or for a payment-related reason.
         */
        public String getReason () { return reason; }
        public void setReason ( String reason ) { this.reason = reason; }
        @Basic()
        @Column(name="\"reason\"")
        private String reason ;
         
        /**
         * End device action issued by this end device control.
         */
        public EndDeviceAction getEndDeviceAction () { return endDeviceAction; }
        public void setEndDeviceAction ( EndDeviceAction endDeviceAction ) { this.endDeviceAction = endDeviceAction; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"EndDeviceAction\"")
        private EndDeviceAction endDeviceAction ;
         
        /**
         * Type of this end device control.
         */
        public EndDeviceControlType getEndDeviceControlType () { return endDeviceControlType; }
        public void setEndDeviceControlType ( EndDeviceControlType endDeviceControlType ) { this.endDeviceControlType = endDeviceControlType; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"EndDeviceControlType\"")
        private EndDeviceControlType endDeviceControlType ;
         
    }
    /**
     * Event detected by a device function associated with the end device.
     */
    @Entity
    @Table(name="\"EndDeviceEvent\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class EndDeviceEvent
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Date and time this activity record has been created (different from the
         * 'status.dateTime', which is the time of a status change of the associated
         * object, if applicable).
         */
        public String getCreatedDateTime () { return createdDateTime; }
        public void setCreatedDateTime ( String createdDateTime ) { this.createdDateTime = createdDateTime; }
        @Basic()
        @Column(name="\"createdDateTime\"")
        private String createdDateTime ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Reason for event resulting in this activity record, typically supplied
         * when user initiated.
         */
        public String getReason () { return reason; }
        public void setReason ( String reason ) { this.reason = reason; }
        @Basic()
        @Column(name="\"reason\"")
        private String reason ;
         
        /**
         * Severity level of event resulting in this activity record.
         */
        public String getSeverity () { return severity; }
        public void setSeverity ( String severity ) { this.severity = severity; }
        @Basic()
        @Column(name="\"severity\"")
        private String severity ;
         
        /**
         * Type of event resulting in this activity record.
         */
        public String getType () { return type; }
        public void setType ( String type ) { this.type = type; }
        @Basic()
        @Column(name="\"type\"")
        private String type ;
         
        /**
         * End device that reported this end device event.
         */
        public EndDevice getEndDevice () { return endDevice; }
        public void setEndDevice ( EndDevice endDevice ) { this.endDevice = endDevice; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"EndDevice\"")
        private EndDevice endDevice ;
         
        /**
         * Information on consequence of event resulting in this activity record.
         */
        public Status getStatus () { return status; }
        public void setStatus ( Status status ) { this.status = status; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"status\"")
        private Status status ;
         
    }
    /**
     * Function performed by an end device such as a meter, communication equipment,
     * controllers, etc.
     */
    @Entity
    @Table(name="\"EndDeviceFunction\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class EndDeviceFunction
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * True if the function is enabled.
         */
        public Boolean getEnabled () { return enabled; }
        public void setEnabled ( Boolean enabled ) { this.enabled = enabled; }
        @Basic()
        @Column(name="\"enabled\"")
        private Boolean enabled ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
    }
    /**
     * End device data.
     */
    @Entity
    @Table(name="\"EndDeviceInfo\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class EndDeviceInfo
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * If true, this is a solid state end device (as opposed to a mechanical or
         * electromechanical device).
         */
        public Boolean getIsSolidState () { return isSolidState; }
        public void setIsSolidState ( Boolean isSolidState ) { this.isSolidState = isSolidState; }
        @Basic()
        @Column(name="\"isSolidState\"")
        private Boolean isSolidState ;
         
        /**
         * Number of potential phases the end device supports, typically 0, 1 or 3.
         */
        public Integer getPhaseCount () { return phaseCount; }
        public void setPhaseCount ( Integer phaseCount ) { this.phaseCount = phaseCount; }
        @Basic()
        @Column(name="\"phaseCount\"")
        private Integer phaseCount ;
         
        /**
         * Rated current.
         */
        public Double getRatedCurrent () { return ratedCurrent; }
        public void setRatedCurrent ( Double ratedCurrent ) { this.ratedCurrent = ratedCurrent; }
        @Basic()
        @Column(name="\"ratedCurrent\"")
        private Double ratedCurrent ;
         
        /**
         * Rated voltage.
         */
        public Double getRatedVoltage () { return ratedVoltage; }
        public void setRatedVoltage ( Double ratedVoltage ) { this.ratedVoltage = ratedVoltage; }
        @Basic()
        @Column(name="\"ratedVoltage\"")
        private Double ratedVoltage ;
         
        /**
         * Inherent capabilities of the device (i.e., the functions it supports).
         */
        public EndDeviceCapability getCapability () { return capability; }
        public void setCapability ( EndDeviceCapability capability ) { this.capability = capability; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"capability\"")
        private EndDeviceCapability capability ;
         
    }
    /**
     * Physical asset that performs the metering role of the usage point. Used
     * for measuring consumption and detection of events.
     */
    @Entity
    @Table(name="\"Meter\"")
    @PrimaryKeyJoinColumn(name="\"mRID\"")
    public static class Meter extends EndDevice
    {
        /**
         * A code used to specify the connection category, e.g. low voltage, where
         * the meter operates.
         */
        public String getConnectionCategory () { return connectionCategory; }
        public void setConnectionCategory ( String connectionCategory ) { this.connectionCategory = connectionCategory; }
        @Basic()
        @Column(name="\"connectionCategory\"")
        private String connectionCategory ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
        /**
         * Status of this asset.
         */
        public Status getStatus () { return status; }
        public void setStatus ( Status status ) { this.status = status; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"status\"")
        private Status status ;
         
    }
    /**
     * A device that indicates or records units of the commodity or other quantity
     * measured.
     */
    @Entity
    @Table(name="\"Register\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Register
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
    }
    /**
     * Date and time for which status 'value' applies.
     */
    public String getDateTime () { return dateTime; }
    public void setDateTime ( String dateTime ) { this.dateTime = dateTime; }
    @Basic()
    @Column(name="\"dateTime\"")
    private String dateTime ;
     
    /**
     * Reason code or explanation for why an object went to the current status
     * 'value'.
     */
    public String getReason () { return reason; }
    public void setReason ( String reason ) { this.reason = reason; }
    @Basic()
    @Column(name="\"reason\"")
    private String reason ;
     
    /**
     * Pertinent information regarding the current 'value', as free form text.
     */
    public String getRemark () { return remark; }
    public void setRemark ( String remark ) { this.remark = remark; }
    @Basic()
    @Column(name="\"remark\"")
    private String remark ;
     
    /**
     * Status value at 'dateTime'; prior status changes may have been kept in
     * instances of activity records associated with the object to which this
     * status applies.
     */
    public String getValue () { return value; }
    public void setValue ( String value ) { this.value = value; }
    @Basic()
    @Column(name="\"value\"")
    private String value ;
     
     
    public static final Class[] allClasses = new Class[]
    {
        AssetKind.class,
        EndDevice.class,
        EndDeviceAction.class,
        EndDeviceControl.class,
        EndDeviceEvent.class,
        EndDeviceFunction.class,
        EndDeviceInfo.class,
        Meter.class,
        Register.class
    };
}
