package au.com.langdale.cimtool.generated;
import javax.persistence.*;
/**
 * Annotated java for OutageMap_OMS_Profile
 * Generated by CIMTool http://cimtool.org
 */
public class OutageMap_OMS_Profile
{
     
    /**
     * Enumeration for the type of area defined; e.g., county, state, parish,
     * zipcode, etc.
     */
    @Entity
    @Table(name="\"AreaKind\"")
    public static class AreaKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * The parts of the AC power system that are designed to carry current or
     * that are conductively connected through terminals.
     */
    @Entity
    @Table(name="\"ConductingEquipment\"")
    @PrimaryKeyJoinColumn(name="\"mRID\"")
    public static class ConductingEquipment extends Equipment
    {
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
    }
     
    /**
     * Defines the current status of the Crew - assigned, arrived, etc.
     */
    @Entity
    @Table(name="\"CrewStatusKind\"")
    public static class CrewStatusKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * End date and time of this interval. The end date and time where the interval
     * is defined up to, but excluded.
     */
    public String getEnd () { return end; }
    public void setEnd ( String end ) { this.end = end; }
    @Basic()
    @Column(name="\"end\"")
    private String end ;
     
    /**
     * Start date and time of this interval. The start date and time is included
     * in the defined interval.
     */
    public String getStart () { return start; }
    public void setStart ( String start ) { this.start = start; }
    @Basic()
    @Column(name="\"start\"")
    private String start ;
     
     
    /**
     * The estimated restoration time (ERT) is the amount of time estimated to
     * correct the outage and can have a confidence factor applied such as high
     * or low confidence that the ERT will be accomplished. This confidence factor
     * may be updated as needed during the outage period - just as the actual
     * ERT can be updated.
     */
    @Entity
    @Table(name="\"ERTConfidenceKind\"")
    public static class ERTConfidenceKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * The parts of a power system that are physical devices, electronic or mechanical.
     */
    @Entity
    @Table(name="\"Equipment\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Equipment
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Location of this power system resource.
         */
        public Location getLocation () { return location; }
        public void setLocation ( Location location ) { this.location = location; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"Location\"")
        private Location location ;
         
    }
    /**
     * The Estimated Restoration Time (ERT) for a single outage
     */
    @Entity
    @Table(name="\"EstimatedRestorationTime\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class EstimatedRestorationTime
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * provides the confidence level that this ERT can be accomplished. This may
         * be changed/updated as needed.
         */
        public String getConfidenceKind () { return confidenceKind; }
        public void setConfidenceKind ( String confidenceKind ) { this.confidenceKind = confidenceKind; }
        @Basic()
        @Column(name="\"confidenceKind\"")
        private String confidenceKind ;
         
        /**
         * estimated time the outage will be restored
         */
        public String getErt () { return ert; }
        public void setErt ( String ert ) { this.ert = ert; }
        @Basic()
        @Column(name="\"ert\"")
        private String ert ;
         
        /**
         * defines the source that provided the ERT value.
         */
        public String getErtSource () { return ertSource; }
        public void setErtSource ( String ertSource ) { this.ertSource = ertSource; }
        @Basic()
        @Column(name="\"ertSource\"")
        private String ertSource ;
         
    }
    /**
     * Abnormal condition causing current flow through conducting equipment, such
     * as caused by equipment failure or short circuits from objects not typically
     * modelled (for example, a tree falling on a line).
     */
    @Entity
    @Table(name="\"Fault\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Fault
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * The kind of phase fault.
         */
        public String getKind () { return kind; }
        public void setKind ( String kind ) { this.kind = kind; }
        @Basic()
        @Column(name="\"kind\"")
        private String kind ;
         
        /**
         * The length to the place where the fault is located starting from terminal
         * with sequence number 1 of the faulted line segment.
         */
        public Double getLengthFromTerminal1 () { return lengthFromTerminal1; }
        public void setLengthFromTerminal1 ( Double lengthFromTerminal1 ) { this.lengthFromTerminal1 = lengthFromTerminal1; }
        @Basic(optional=true)
        @Column(name="\"lengthFromTerminal1\"")
        private Double lengthFromTerminal1 ;
         
        /**
         * The date and time at which the fault occurred.
         */
        public String getOccurredDateTime () { return occurredDateTime; }
        public void setOccurredDateTime ( String occurredDateTime ) { this.occurredDateTime = occurredDateTime; }
        @Basic()
        @Column(name="\"occurredDateTime\"")
        private String occurredDateTime ;
         
        /**
         * The phases participating in the fault. The fault connections into these
         * phases are further specified by the type of fault.
         */
        public PhaseCode getPhases () { return phases; }
        public void setPhases ( PhaseCode phases ) { this.phases = phases; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"phases\"")
        private PhaseCode phases ;
         
        /**
         * Equipment carrying this fault.
         */
        public Equipment getFaultyEquipment () { return faultyEquipment; }
        public void setFaultyEquipment ( Equipment faultyEquipment ) { this.faultyEquipment = faultyEquipment; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"FaultyEquipment\"")
        private Equipment faultyEquipment ;
         
        /**
         * Location of this fault.
         */
        public Location getLocation () { return location; }
        public void setLocation ( Location location ) { this.location = location; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"Location\"")
        private Location location ;
         
    }
    /**
     * Type of cause of the fault.
     */
    @Entity
    @Table(name="\"FaultCauseType\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class FaultCauseType
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The description is a free human readable text describing or naming the
         * object. It may be non unique and may not correlate to a naming hierarchy.
         */
        public String getDescription () { return description; }
        public void setDescription ( String description ) { this.description = description; }
        @Basic()
        @Column(name="\"description\"")
        private String description ;
         
        /**
         * The name is any free human readable and possibly non unique text naming
         * the object.
         */
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Basic()
        @Column(name="\"name\"")
        private String name ;
         
    }
    /**
     * The place, scene, or point of something where someone or something has
     * been, is, and/or will be at a given moment in time. It can be defined with
     * one or more position points (coordinates) in a given coordinate system.
     */
    @Entity
    @Table(name="\"Location\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Location
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * (if applicable) Direction that allows field crews to quickly find a given
         * asset. For a given location, such as a street address, this is the relative
         * direction in which to find the asset. For example, a streetlight may be
         * located at the 'NW' (northwest) corner of the customer's site, or a usage
         * point may be located on the second floor of an apartment building.
         */
        public String getDirection () { return direction; }
        public void setDirection ( String direction ) { this.direction = direction; }
        @Basic()
        @Column(name="\"direction\"")
        private String direction ;
         
        /**
         * (if applicable) Reference to geographical information source, often external
         * to the utility.
         */
        public String getGeoInfoReference () { return geoInfoReference; }
        public void setGeoInfoReference ( String geoInfoReference ) { this.geoInfoReference = geoInfoReference; }
        @Basic()
        @Column(name="\"geoInfoReference\"")
        private String geoInfoReference ;
         
        /**
         * Classification by utility's corporate standards and practices, relative
         * to the location itself (e.g., geographical, functional accounting, etc.,
         * not a given property that happens to exist at that location).
         */
        public String getType () { return type; }
        public void setType ( String type ) { this.type = type; }
        @Basic()
        @Column(name="\"type\"")
        private String type ;
         
        /**
         * Coordinate system used to describe position points of this location.
         */
        public CoordinateSystem getCoordinateSystem () { return coordinateSystem; }
        public void setCoordinateSystem ( CoordinateSystem coordinateSystem ) { this.coordinateSystem = coordinateSystem; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"CoordinateSystem\"")
        private CoordinateSystem coordinateSystem ;
         
    }
    /**
     * Document describing details of an active or planned outage in a part of
     * the electrical network.
     * A non-planned outage may be created upon:
     * - a breaker trip,
     * - a fault indicator status change,
     * - a meter event indicating customer outage,
     * - a reception of one or more customer trouble calls, or
     * - an operator command, reflecting information obtained from the field crew.
     * Outage restoration may be performed using a switching plan which complements
     * the outage information with detailed switching activities, including the
     * relationship to the crew and work.
     * A planned outage may be created upon:
     * - a request for service, maintenance or construction work in the field,
     * or
     * - an operator-defined outage for what-if/contingency network analysis.
     */
    @Entity
    @Table(name="\"Outage\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Outage
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * a name to denote the community - this could be a name or a code of some
         * kind.
         */
        public String getCommunityDescriptor () { return communityDescriptor; }
        public void setCommunityDescriptor ( String communityDescriptor ) { this.communityDescriptor = communityDescriptor; }
        @Basic()
        @Column(name="\"communityDescriptor\"")
        private String communityDescriptor ;
         
        /**
         * number of customers that have been restored in the area.
         */
        public Integer getCustomersRestored () { return customersRestored; }
        public void setCustomersRestored ( Integer customersRestored ) { this.customersRestored = customersRestored; }
        @Basic()
        @Column(name="\"customersRestored\"")
        private Integer customersRestored ;
         
        /**
         * The updated number of meters affected by the outage as reported by the
         * OMS within the utility. It is assumed this number will be updated repeatedly
         * until the full outage is resolved.
         */
        public Integer getMetersAffected () { return metersAffected; }
        public void setMetersAffected ( Integer metersAffected ) { this.metersAffected = metersAffected; }
        @Basic()
        @Column(name="\"metersAffected\"")
        private Integer metersAffected ;
         
        /**
         * the total number of customers that are served in the area (both outaged
         * and not outaged).
         */
        public Integer getOriginalCustomersServed () { return originalCustomersServed; }
        public void setOriginalCustomersServed ( Integer originalCustomersServed ) { this.originalCustomersServed = originalCustomersServed; }
        @Basic()
        @Column(name="\"originalCustomersServed\"")
        private Integer originalCustomersServed ;
         
        /**
         * The original number of meters that were affected as reported by the OMS
         * within the utility. That is, this is the total number of meters that were
         * out at the beginning of the outage.
         */
        public Integer getOriginalMetersAffected () { return originalMetersAffected; }
        public void setOriginalMetersAffected ( Integer originalMetersAffected ) { this.originalMetersAffected = originalMetersAffected; }
        @Basic()
        @Column(name="\"originalMetersAffected\"")
        private Integer originalMetersAffected ;
         
        /**
         * Defines if the outage has been verified or is only estimated
         */
        public String getOutageKind () { return outageKind; }
        public void setOutageKind ( String outageKind ) { this.outageKind = outageKind; }
        @Basic()
        @Column(name="\"outageKind\"")
        private String outageKind ;
         
        /**
         * defines the status of the crew as in dispatched or arrived, etc.
         */
        public String getStatusKind () { return statusKind; }
        public void setStatusKind ( String statusKind ) { this.statusKind = statusKind; }
        @Basic()
        @Column(name="\"statusKind\"")
        private String statusKind ;
         
        /**
         * This contains an disclaimers the utility would like to place on the data
         * provided to any stakeholder. This may be different for different stakeholders.
         * This should possibly be an attribute under the Organization class but it
         * is placed here for now.
         */
        public String getUtilityDisclaimer () { return utilityDisclaimer; }
        public void setUtilityDisclaimer ( String utilityDisclaimer ) { this.utilityDisclaimer = utilityDisclaimer; }
        @Basic()
        @Column(name="\"utilityDisclaimer\"")
        private String utilityDisclaimer ;
         
        /**
         * Actual outage period; end of the period corresponds to the actual restoration
         * time.
         */
        public DateTimeInterval getActualPeriod () { return actualPeriod; }
        public void setActualPeriod ( DateTimeInterval actualPeriod ) { this.actualPeriod = actualPeriod; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"actualPeriod\"")
        private DateTimeInterval actualPeriod ;
         
        /**
         * Estimated outage period for a planned outage. The start of the period is
         * the start of the planned outage and the end of the period corresponds to
         * the end of the planned outage.
         */
        public DateTimeInterval getEstimatedPeriod () { return estimatedPeriod; }
        public void setEstimatedPeriod ( DateTimeInterval estimatedPeriod ) { this.estimatedPeriod = estimatedPeriod; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"estimatedPeriod\"")
        private DateTimeInterval estimatedPeriod ;
         
        /**
         * The estimated time that the power will be restored after an outage
         */
        public EstimatedRestorationTime getEstimatedRestorationTime () { return estimatedRestorationTime; }
        public void setEstimatedRestorationTime ( EstimatedRestorationTime estimatedRestorationTime ) { this.estimatedRestorationTime = estimatedRestorationTime; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"EstimatedRestorationTime\"")
        private EstimatedRestorationTime estimatedRestorationTime ;
         
    }
    /**
     * This defines the area covered by the Outage.
     */
    @Entity
    @Table(name="\"OutageArea\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class OutageArea
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * This is the reported time of the first outage report
         */
        public String getEarliestReportedTime () { return earliestReportedTime; }
        public void setEarliestReportedTime ( String earliestReportedTime ) { this.earliestReportedTime = earliestReportedTime; }
        @Basic()
        @Column(name="\"earliestReportedTime\"")
        private String earliestReportedTime ;
         
        /**
         * defines the number of meters served in the defined area.
         */
        public Integer getMetersServed () { return metersServed; }
        public void setMetersServed ( Integer metersServed ) { this.metersServed = metersServed; }
        @Basic()
        @Column(name="\"metersServed\"")
        private Integer metersServed ;
         
        /**
         * defines the type of area that has the outage - county, state, zipcode,
         * etc.
         */
        public String getOutageAreaKind () { return outageAreaKind; }
        public void setOutageAreaKind ( String outageAreaKind ) { this.outageAreaKind = outageAreaKind; }
        @Basic()
        @Column(name="\"outageAreaKind\"")
        private String outageAreaKind ;
         
    }
     
    /**
     * This defines if the outage have been predicted or confirmed
     */
    @Entity
    @Table(name="\"OutageStatusKind\"")
    public static class OutageStatusKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
     
    /**
     * The type of fault connection among phases.
     */
    @Entity
    @Table(name="\"PhaseConnectedFaultKind\"")
    public static class PhaseConnectedFaultKind
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
    /**
     * Logical or physical point in the network to which readings or events may
     * be attributed. Used at the place where a physical or virtual meter may
     * be located; however, it is not required that a meter be present.
     */
    @Entity
    @Table(name="\"UsagePoint\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class UsagePoint
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Phase code. Number of wires and specific nominal phases can be deduced
         * from enumeration literal values. For example, ABCN is three-phase, four-wire,
         * s12n (splitSecondary12N) is single-phase, three-wire, and s1n and s2n are
         * single-phase, two-wire.
         */
        public PhaseCode getPhaseCode () { return phaseCode; }
        public void setPhaseCode ( PhaseCode phaseCode ) { this.phaseCode = phaseCode; }
        @ManyToOne(fetch=FetchType.LAZY)
        @JoinColumn(name="\"phaseCode\"")
        private PhaseCode phaseCode ;
         
    }
     
    public static final Class[] allClasses = new Class[]
    {
        AreaKind.class,
        ConductingEquipment.class,
        CrewStatusKind.class,
        ERTConfidenceKind.class,
        Equipment.class,
        EstimatedRestorationTime.class,
        Fault.class,
        FaultCauseType.class,
        Location.class,
        Outage.class,
        OutageArea.class,
        OutageStatusKind.class,
        PhaseConnectedFaultKind.class,
        UsagePoint.class
    };
}
