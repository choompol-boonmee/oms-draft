package au.com.langdale.cimtool.generated;
import javax.persistence.*;
/**
 * Annotated java for Profile
 * Generated by CIMTool http://cimtool.org
 */
public class Profile
{
    /**
     * Analog represents an analog Measurement.
     */
    @Entity
    @Table(name="\"Analog\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class Analog
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * Normal measurement value, e.g., used for percentage calculations.
         */
        public Double getNormalValue () { return normalValue; }
        public void setNormalValue ( Double normalValue ) { this.normalValue = normalValue; }
        @Basic()
        @Column(name="\"normalValue\"")
        private Double normalValue ;
         
        /**
         * Indicates to which phases the measurement applies and avoids the need to
         * use 'measurementType' to also encode phase information (which would explode
         * the types). The phase information in Measurement, along with 'measurementType'
         * and 'phases' uniquely defines a Measurement for a device, based on normal
         * network phase. Their meaning will not change when the computed energizing
         * phasing is changed due to jumpers or other reasons.
         * If the attribute is missing three phases (ABC) shall be assumed.
         */
        public String getPhases () { return phases; }
        public void setPhases ( String phases ) { this.phases = phases; }
        @Basic()
        @Column(name="\"phases\"")
        private String phases ;
         
        /**
         * The unit of measure of the measured quantity.
         */
        public String getUnitSymbol () { return unitSymbol; }
        public void setUnitSymbol ( String unitSymbol ) { this.unitSymbol = unitSymbol; }
        @Basic()
        @Column(name="\"unitSymbol\"")
        private String unitSymbol ;
         
    }
    /**
     * AnalogValue represents an analog MeasurementValue.
     */
    @Entity
    @Table(name="\"AnalogValue\"")
    @Inheritance(strategy=InheritanceType.JOINED)
    public static class AnalogValue
    {
        public String getMRID () { return mRID; }
        public void setMRID ( String mRID ) { this.mRID = mRID; }
        @Id
        @Column(name="\"mRID\"")
        private String mRID ;
         
        /**
         * The value to supervise.
         */
        public Double getValue () { return value; }
        public void setValue ( Double value ) { this.value = value; }
        @Basic()
        @Column(name="\"value\"")
        private Double value ;
         
    }
     
    /**
     * An unordered enumeration of phase identifiers. Allows designation of phases
     * for both transmission and distribution equipment, circuits and loads. The
     * enumeration, by itself, does not describe how the phases are connected
     * together or connected to ground. Ground is not explicitly denoted as a
     * phase.
     * Residential and small commercial loads are often served from single-phase,
     * or split-phase, secondary circuits. For the example of s12N, phases 1 and
     * 2 refer to hot wires that are 180 degrees out of phase, while N refers
     * to the neutral wire. Through single-phase transformer connections, these
     * secondary circuits may be served from one or two of the primary phases
     * A, B, and C. For three-phase loads, use the A, B, C phase codes instead
     * of s12N.
     * The integer values are from IEC 61968-9 to support revenue metering applications.
     */
    @Entity
    @Table(name="\"PhaseCode\"")
    public static class PhaseCode
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
     
    /**
     * The derived units defined for usage in the CIM. In some cases, the derived
     * unit is equal to an SI unit. Whenever possible, the standard derived symbol
     * is used instead of the formula for the derived unit. For example, the unit
     * symbol Farad is defined as "F" instead of "CPerV". In cases where a standard
     * symbol does not exist for a derived unit, the formula for the unit is used
     * as the unit symbol. For example, density does not have a standard symbol
     * and so it is represented as "kgPerm3". With the exception of the "kg",
     * which is an SI unit, the unit symbols do not contain multipliers and therefore
     * represent the base derived unit to which a multiplier can be applied as
     * a whole.
     * Every unit symbol is treated as an unparseable text as if it were a single-letter
     * symbol. The meaning of each unit symbol is defined by the accompanying
     * descriptive text and not by the text contents of the unit symbol.
     * To allow the widest possible range of serializations without requiring
     * special character handling, several substitutions are made which deviate
     * from the format described in IEC 80000-1. The division symbol "/" is replaced
     * by the letters "Per". Exponents are written in plain text after the unit
     * as "m3" instead of being formatted as "m" with a superscript of 3 or introducing
     * a symbol as in "m^3". The degree symbol "ï¿½" is replaced with the letters
     * "deg". Any clarification of the meaning for a substitution is included
     * in the description for the unit symbol.
     * Non-SI units are included in list of unit symbols to allow sources of data
     * to be correctly labelled with their non-SI units (for example, a GPS sensor
     * that is reporting numbers that represent feet instead of meters). This
     * allows software to use the unit symbol information correctly convert and
     * scale the raw data of those sources into SI-based units.
     * The integer values are used for harmonization with IEC 61850.
     */
    @Entity
    @Table(name="\"UnitSymbol\"")
    public static class UnitSymbol
    {
        public String getName () { return name; }
        public void setName ( String name ) { this.name = name; }
        @Id
        @Column(name="\"name\"")
        private String name ;
         
    };
     
    public static final Class[] allClasses = new Class[]
    {
        Analog.class,
        AnalogValue.class,
        PhaseCode.class,
        UnitSymbol.class
    };
}
